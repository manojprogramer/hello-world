//<<<<<<<<<<<<<<  REVERSE LINKED LIST PROBLEM  >>>>>>>>>>>>>>>>>>

//BRUTE FORCE APPORACH USING HASHING

class Solution {
    public ListNode reverseList(ListNode head) {
        Stack s = new Stack();
        ListNode temp = head;
        while(temp != null)
        {
            s.push(temp.val);
            temp = temp.next;
        }
        temp = head;
        while(temp != null)
        {
            temp.val = (Integer)s.peek();
            s.pop();
            
            temp = temp.next;
        }
    return head;
    }
}

TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(N) ////////// BECAUSE USING EXTERNAL DATA STRUCTURE (STACK)

/// OPTIMAL SOLUTION

class Solution {
    public ListNode reverseList(ListNode head) {
       ListNode prev = null;
       ListNode front = null;
       ListNode temp = head;
       while(temp != null)
       { 
        front = temp.next;
        temp.next = prev;
        prev = temp;
        temp = front;
       }
    return prev;
    }
}

TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(1)


// RECURSION
class Solution {
    public ListNode reverseList(ListNode head) {
       if(head == null || head.next == null)
            return head;
        ListNode newhead = reverseList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newhead;

    }
}
TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(N)     // BECAUSE WHENEVER THE RECURSIVE CALL IS HAPPENED THE SPACE IS STORED IN THE STACK
