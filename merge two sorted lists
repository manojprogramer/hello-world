>>>>>>>>>>>>>>>>>>>>>>>>>>>MERGE TWO SORTED LISTS<<<<<<<<<<<<<<<<<<<<<<
//BRUTE FORCE APPROACH

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ArrayList<Integer> arraylist = new ArrayList<>();
        while(list1 != null)
        {
            arraylist.add(list1.val);
            list1 = list1.next;
        }
        while(list2 != null)
        {
            arraylist.add(list2.val);
            list2 = list2.next;
        }
        Collections.sort(arraylist);
        ListNode head = null;
        for(int i = 0; i < arraylist.size(); i++)
        {
            ListNode list = new ListNode(arraylist.get(i));
            ListNode temp = head;
            if(temp == null)
            {
                list.next = head;
                head = list;
            }
            else
            {
                while(temp.next!= null)
                {
                    temp = temp.next;
                }
                temp.next = list;
            }
            

        }
        return head;
    }
}
TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(N) // BECAUSE WE ARE USING EXTERNAL DATA STRUCTURE

// OPTIMAL APPROACH

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while(list1 != null && list2 != null)
        {
            if(list1.val < list2.val)
            {
                temp.next = list1;
                temp = list1;
                list1 = list1.next;

            }
            else {
                temp.next = list2;
                temp = list2;
                list2 = list2.next;
            }
        }
        if(list1 != null) temp.next = list1;
        else temp.next = list2;
        return dummy.next;
    }
}

TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(1)
