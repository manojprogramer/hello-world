
//DETECT CYCLE IN LINKED LIST USING HASHING
public class Solution {
    public boolean hasCycle(ListNode head) {
        //Using Map Datastructure
        Map<ListNode, Integer> map = new HashMap<>();
        while(head != null)
        {
            if(map.containsKey(head))
                return true;
            map.put(head,1);
            head = head.next;
        }
        return false;
    }
}
TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(N)   BECAUSE USING THE EXTERNAL DATA STRUCTURE

>>>>>>>>>>OPTIMAL APPORACH<<<<<<<<<<<<<:

//SLOW AND FAST POINTER APPROACH
public class Solution {
    public boolean hasCycle(ListNode head) {
      ListNode slow = head;
      ListNode fast = head;
      while(fast != null && fast.next != null)
      {
        slow = slow.next;
        fast = fast.next.next; // WE ARE INCREMENTING THE FAST VALUE BY EXTRA ONE BECAUSE WHEN EVER WE DIVIDE THE NUMBER BY 1 THAT IS EQUAL TO ZER0 (I.E NUMBER OF NODES ARE MAY PRIME, EVEN, OR ODD )
        if(slow == fast) return true;
      }
      return false;
    }
}
TIME COMPLEXITY : O(N)
SPACE COMPLEXITY : O(1)
